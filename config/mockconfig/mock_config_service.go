// Code generated by MockGen. DO NOT EDIT.
// Source: config/service/config_service.go

// Package mockconfig is a generated GoMock package.
package mockconfig

import (
	reflect "reflect"

	entity "github.com/enchainte/enchainte-sdk-go/config/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockConfigService is a mock of ConfigService interface.
type MockConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceMockRecorder
}

// MockConfigServiceMockRecorder is the mock recorder for MockConfigService.
type MockConfigServiceMockRecorder struct {
	mock *MockConfigService
}

// NewMockConfigService creates a new mock instance.
func NewMockConfigService(ctrl *gomock.Controller) *MockConfigService {
	mock := &MockConfigService{ctrl: ctrl}
	mock.recorder = &MockConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigService) EXPECT() *MockConfigServiceMockRecorder {
	return m.recorder
}

// GetNetworkConfiguration mocks base method.
func (m *MockConfigService) GetNetworkConfiguration(network entity.Network) entity.NetworkConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkConfiguration", network)
	ret0, _ := ret[0].(entity.NetworkConfiguration)
	return ret0
}

// GetNetworkConfiguration indicates an expected call of GetNetworkConfiguration.
func (mr *MockConfigServiceMockRecorder) GetNetworkConfiguration(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkConfiguration", reflect.TypeOf((*MockConfigService)(nil).GetNetworkConfiguration), network)
}
