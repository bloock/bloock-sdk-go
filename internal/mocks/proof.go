// Code generated by MockGen. DO NOT EDIT.
// Source: internal/proof/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	proof "github.com/enchainte/enchainte-sdk-go/internal/proof"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// ProofService is a mock of Service interface
type ProofService struct {
	ctrl     *gomock.Controller
	recorder *ProofServiceMockRecorder
}

// ProofServiceMockRecorder is the mock recorder for ProofService
type ProofServiceMockRecorder struct {
	mock *ProofService
}

// NewProofService creates a new mock instance
func NewProofService(ctrl *gomock.Controller) *ProofService {
	mock := &ProofService{ctrl: ctrl}
	mock.recorder = &ProofServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ProofService) EXPECT() *ProofServiceMockRecorder {
	return m.recorder
}

// Proof mocks base method
func (m *ProofService) Proof(hashes [][]byte) (*proof.Proof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proof", hashes)
	ret0, _ := ret[0].(*proof.Proof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Proof indicates an expected call of Proof
func (mr *ProofServiceMockRecorder) Proof(hashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proof", reflect.TypeOf((*ProofService)(nil).Proof), hashes)
}

// Verify mocks base method
func (m *ProofService) Verify(hashes [][]byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", hashes)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *ProofServiceMockRecorder) Verify(hashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*ProofService)(nil).Verify), hashes)
}

// CalculateRoot mocks base method
func (m *ProofService) CalculateRoot(proof *proof.Proof) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateRoot", proof)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateRoot indicates an expected call of CalculateRoot
func (mr *ProofServiceMockRecorder) CalculateRoot(proof interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateRoot", reflect.TypeOf((*ProofService)(nil).CalculateRoot), proof)
}
