// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/http/request.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// HttpClient is a mock of Client interface
type HttpClient struct {
	ctrl     *gomock.Controller
	recorder *HttpClientMockRecorder
}

// HttpClientMockRecorder is the mock recorder for HttpClient
type HttpClientMockRecorder struct {
	mock *HttpClient
}

// NewHttpClient creates a new mock instance
func NewHttpClient(ctrl *gomock.Controller) *HttpClient {
	mock := &HttpClient{ctrl: ctrl}
	mock.recorder = &HttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *HttpClient) EXPECT() *HttpClientMockRecorder {
	return m.recorder
}

// Request mocks base method
func (m *HttpClient) Request(apiKey, verb, url string, body interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", apiKey, verb, url, body)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request
func (mr *HttpClientMockRecorder) Request(apiKey, verb, url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*HttpClient)(nil).Request), apiKey, verb, url, body)
}

// PostRequest mocks base method
func (m *HttpClient) PostRequest(url string, body interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRequest", url, body)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRequest indicates an expected call of PostRequest
func (mr *HttpClientMockRecorder) PostRequest(url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRequest", reflect.TypeOf((*HttpClient)(nil).PostRequest), url, body)
}

// GetRequest mocks base method
func (m *HttpClient) GetRequest(url string, headers map[string]string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", url, headers)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest
func (mr *HttpClientMockRecorder) GetRequest(url, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*HttpClient)(nil).GetRequest), url, headers)
}
