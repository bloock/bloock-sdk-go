// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/crypto/hash.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Hasher is a mock of Hasher interface
type Hasher struct {
	ctrl     *gomock.Controller
	recorder *HasherMockRecorder
}

// HasherMockRecorder is the mock recorder for Hasher
type HasherMockRecorder struct {
	mock *Hasher
}

// NewHasher creates a new mock instance
func NewHasher(ctrl *gomock.Controller) *Hasher {
	mock := &Hasher{ctrl: ctrl}
	mock.recorder = &HasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Hasher) EXPECT() *HasherMockRecorder {
	return m.recorder
}

// Hash mocks base method
func (m *Hasher) Hash(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash
func (mr *HasherMockRecorder) Hash(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*Hasher)(nil).Hash), key)
}

// Validate mocks base method
func (m *Hasher) Validate(hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *HasherMockRecorder) Validate(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*Hasher)(nil).Validate), hash)
}
