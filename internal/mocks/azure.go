// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cloud/azure.go

// Package mocks is a generated GoMock package.
package mocks

import (
	cloud "github.com/enchainte/enchainte-sdk-go/internal/cloud"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// CloudService is a mock of Service interface
type CloudService struct {
	ctrl     *gomock.Controller
	recorder *CloudServiceMockRecorder
}

// CloudServiceMockRecorder is the mock recorder for CloudService
type CloudServiceMockRecorder struct {
	mock *CloudService
}

// NewCloudService creates a new mock instance
func NewCloudService(ctrl *gomock.Controller) *CloudService {
	mock := &CloudService{ctrl: ctrl}
	mock.recorder = &CloudServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *CloudService) EXPECT() *CloudServiceMockRecorder {
	return m.recorder
}

// ConfigParameters mocks base method
func (m *CloudService) RequestSdkParameters() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestSdkParameters")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigParameters indicates an expected call of ConfigParameters
func (mr *CloudServiceMockRecorder) ConfigParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestSdkParameters", reflect.TypeOf((*CloudService)(nil).RequestSdkParameters))
}

// SdkParameters mocks base method
func (m *CloudService) SdkParameters() cloud.SdkParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SdkParameters")
	ret0, _ := ret[0].(cloud.SdkParams)
	return ret0
}

// SdkParameters indicates an expected call of SdkParameters
func (mr *CloudServiceMockRecorder) SdkParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SdkParameters", reflect.TypeOf((*CloudService)(nil).SdkParameters))
}
