// Code generated by MockGen. DO NOT EDIT.
// Source: internal/anchor/service/anchorer_service.go

// Package mockanchor is a generated GoMock package.
package mockanchor

import (
	reflect "reflect"

	entity "github.com/enchainte/enchainte-sdk-go/internal/anchor/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockAnchorerService is a mock of AnchorerService interface.
type MockAnchorerService struct {
	ctrl     *gomock.Controller
	recorder *MockAnchorerServiceMockRecorder
}

// MockAnchorerServiceMockRecorder is the mock recorder for MockAnchorerService.
type MockAnchorerServiceMockRecorder struct {
	mock *MockAnchorerService
}

// NewMockAnchorerService creates a new mock instance.
func NewMockAnchorerService(ctrl *gomock.Controller) *MockAnchorerService {
	mock := &MockAnchorerService{ctrl: ctrl}
	mock.recorder = &MockAnchorerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnchorerService) EXPECT() *MockAnchorerServiceMockRecorder {
	return m.recorder
}

// GetAnchor mocks base method.
func (m *MockAnchorerService) GetAnchor(anchorId int) (entity.Anchor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnchor", anchorId)
	ret0, _ := ret[0].(entity.Anchor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnchor indicates an expected call of GetAnchor.
func (mr *MockAnchorerServiceMockRecorder) GetAnchor(anchorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnchor", reflect.TypeOf((*MockAnchorerService)(nil).GetAnchor), anchorId)
}

// WaitAnchor mocks base method.
func (m *MockAnchorerService) WaitAnchor(anchorId, timeout int) (entity.Anchor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitAnchor", anchorId, timeout)
	ret0, _ := ret[0].(entity.Anchor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitAnchor indicates an expected call of WaitAnchor.
func (mr *MockAnchorerServiceMockRecorder) WaitAnchor(anchorId, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitAnchor", reflect.TypeOf((*MockAnchorerService)(nil).WaitAnchor), anchorId, timeout)
}
